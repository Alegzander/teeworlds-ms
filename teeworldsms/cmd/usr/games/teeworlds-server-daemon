#!/usr/bin/env python
if __name__ == '__main__':
    main()

from bzrlib.osutils import dirname
import getopt
import os
import shlex
import sys
import subprocess

logfile = '/var/log/teeworlds.log'
pidfile = '/var/run/teeworlds.pid'
confFile = '/etc/teeworlds.conf'

def usage():
    print 'Daemon for handling teeworlds-server'
    print 'Usage: %r [-c config-file] [-p pidfile]' % sys.argv[0]
    print 'Options:'
    print '\t-c --config-file <path to config>\tPath to configuration file for teeworlds-server. Default value: /etc/teeworlds.conf'
    print '\t-p --pidfile <path to pid>\t\tPath to store pid file. Default value: /var/run/teeworlds.pid'
    print '\t-l --log <logfile>\t\t\tSet log file location. Default value: /var/log/teeworlds.log'

def check_pid(pid):
    try:
        os.kill(pid, 0)
    except OSError:
        return False
    else:
        return True

try:
    opts, args = getopt.getopt(sys.argv[1:], "hp:c:u:l:", ['help', 'pidfile=', 'config-file=', 'uid=', 'log='])
except getopt.GetoptError as err:
    print 'Error: %r \n' % str(err)
    usage()

#Reading supplied options
for option, value in opts:
    if option in ('-c', '--config-file'):
        confFile = value
    elif option in ('-l', '--log'):
        logfile = value
    elif option in ('-p', '--pidfile'):
        pidfile = value

#Some checks
for directory in [dirname(logfile), dirname(confFile), dirname(pidfile)]:
    if os.path.exists(directory) == False:
        print '%r does not exist.' % directory
        exit(20)
    elif os.access(directory, os.W_OK) == False:
        print '%r is not writable.' % directory
        exit(25)

try:
    pidStorage = file(pidfile, 'r')
    pid = pidStorage.read()
    pidStorage.close()

    if check_pid(int(pid)) == False:
        os.remove(pidfile)
        raise IOError()
    else:
        print '\nServer is already running'
except IOError as error:
    command = '/usr/games/teeworlds-server "exec %s"' % confFile
    daemon = subprocess.Popen(shlex.split(command), stdout=file(logfile, 'w'))

    if daemon.returncode != None and daemon.returncode != 0:
        print '\nCould not start server'
        exit(30)

    pidStorage = file(pidfile, 'w')
    pidStorage.write('%d'%daemon.pid)
    pidStorage.close()